generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  userIrregularVerbs UserIrregularVerbs[]
  termCollection     TermCollection[]
  userTerms          UserTerms[]
  learningCollection LearningCollection[]
}

model IrregularVerbs {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  hungarian          String
  enV1               String
  enV2               String
  enV3               String
  userIrregularVerbs UserIrregularVerbs[]
}

// enum TermStatus {
//   SlightlyFamiliar
//   PartiallyLearned
//   WellKnown
//   Problematic
// }

enum TermMark {
  Known
  Repeatable
}

model UserIrregularVerbs {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  mark TermMark?

  owner           User           @relation(fields: [ownerId], references: [id])
  ownerId         String         @db.ObjectId
  irregularVerb   IrregularVerbs @relation(fields: [irregularVerbId], references: [id])
  irregularVerbId String         @db.ObjectId

  @@unique([irregularVerbId, ownerId])
}

model TermCollection {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  owner              User                 @relation(fields: [ownerId], references: [id])
  ownerId            String               @db.ObjectId
  userTerms          UserTerms[]
  learningCollection LearningCollection[]
}

model UserTerms {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  hungarian String
  english   String
  mark      TermMark?

  owner          User           @relation(fields: [ownerId], references: [id])
  ownerId        String         @db.ObjectId
  termCollection TermCollection @relation(fields: [collectionId], references: [id])
  collectionId   String         @db.ObjectId
  learningTerm   LearningTerm[]
}

enum LearningTermStatus {
  StillLearning
  GotIt
}

model LearningTerm {
  id     String              @id @default(auto()) @map("_id") @db.ObjectId
  status LearningTermStatus?
  order  Int

  term                 UserTerms          @relation(fields: [termId], references: [id])
  termId               String             @db.ObjectId
  learningCollection   LearningCollection @relation(fields: [learningCollectionId], references: [id])
  learningCollectionId String             @db.ObjectId
}

model LearningCollection {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  inProgress Boolean @default(true)

  owner          User           @relation(fields: [ownerId], references: [id])
  ownerId        String         @db.ObjectId
  termCollection TermCollection @relation(fields: [collectionId], references: [id])
  collectionId   String         @db.ObjectId
  terms          LearningTerm[]
}
